from std.vm_api.fs import fs
from std.io import println
from std.string import Char


type FileOpenMode = enum as u8{
    Read = 0x1,
    Write = 0x2,
    Append = 0x4,
    Binary = 0x8,
    Create = 0x10,
    Truncate = 0x20,
    Exclusive = 0x40
}

type FSError = enum {
    Ok = 0,
    
    // Generic errors
    InvalidArgument,   // Invalid parameter passed
    OutOfMemory,       // Memory allocation failed
    BufferTooSmall,    // Provided buffer is too small
    
    // Permission/access errors
    PermissionDenied,  // No permission to access file/dir
    AccessDenied,      // System denied access (locks etc)
    
    // File/path errors
    NotFound,          // File/directory not found
    AlreadyExists,     // File/directory already exists
    PathTooLong,       // Path exceeds system limits
    NameTooLong,       // Filename exceeds system limits
    NotDirectory,      // Path is not a directory
    IsDirectory,       // Path is a directory when file expected
    DirectoryNotEmpty, // Directory not empty on removal
    
    // I/O errors
    EndOfFile,         // End of file reached
    DiskFull,          // No space left on device
    IOError,           // Generic I/O error
    BrokenPipe,        // Broken pipe
    Interrupted,       // Operation interrupted
    WouldBlock,        // Operation would block
    
    // System errors
    TooManyOpenFiles,  // System limit on open files reached
    NotSupported,      // Operation not supported
    InvalidHandle,     // Invalid file handle
    FileTooLarge,      // File is too large
    
    // Network filesystem errors
    NetworkUnreachable,// Network unreachable
    HostUnreachable,   // Host unreachable
    ConnectionRefused, // Connection refused
    
    // Other errors
    UnknownError       // Unknown error occurred
}

type FileAttributes = {
    // ID of the device containing the file.	
    deviceId: u64,
    // File's unique inode number on the filesystem.	
    inodeNumber: u64,
    // Number of hard links to the file. Indicates how many directory entries point to this file.	
    hardLinkCount: u32,
    // ID of the device, if the file is a special device file (e.g., character or block device).	
    specialDeviceId: u32,
    // Preferred block size for filesystem I/O operations for this file.	
    blockSize: u64,
    // Number of 512-byte blocks allocated to the file.	
    blockCount: u64,
    // Time of the last modification of the file content (in seconds since the epoch).	
    lastModifiedTime: u64,
    // Time of the last access to the file (in seconds since the epoch).	
    lastAccessTime: u64,
    // Time of the last status change (metadata modification, not content; in seconds since the epoch).	
    creationOrMetadataChangeTime: u64,
    // Total size of the file in bytes.	
    fileSize: u64,
    // File mode, indicating permissions and file type (e.g., regular file, directory, symbolic link).	
    fileMode: u32,
    // User ID of the file owner.	
    ownerUserId: u32,
    // Group ID of the file owner.	
    ownerGroupId: u32
}

type File = class {
    let const fileHandler: u64

    fn init(name: String, mode: u8) {
        let (handler, error) = fs.fs_open(name.toCString(), mode)
        println("Opening file: " +name + " handler: " + handler+ " error: " + error)
        if(error) {
            println("Error opening file: " +name)
        }
        this.fileHandler = handler
    }

    fn write(data: String) -> void {
        fs.fs_write(this.fileHandler, data.bytes(), data.rawLength())
    }

    fn write(data: u8[]) -> void {
        fs.fs_write(this.fileHandler, data, data.length)
    }

    fn writeln(data: String) -> void {
        this.write(data)
        this.write(b"\n")
    }

    fn read(n: u64) -> String {
        let (buffer, error) = fs.fs_read(this.fileHandler, n)
        if(error) {
            return new String()
        }
        else {
            return new String(buffer)
        }
    }

    fn readLine() -> String {
        let (buffer, error) = fs.fs_readline(this.fileHandler)
        if(error) {
            println("Error reading line: "+ error)
            return new String()
        }
        else {
            return new String(buffer)
        }
    }

    fn readAll() -> String {
        let (buffer, error) = fs.fs_readall(this.fileHandler)
        if(error) {
            println("Error reading all")
            return new String()
        }
        else {
            return new String(buffer)
        }
    }

    fn close() -> void {
        fs.fs_close(this.fileHandler)
    }
}


fn deleteFile(filepath: String) -> FSError {
    let error = fs.fs_delete(filepath.toCString())
    return error
}

fn mkdir(dir: String) -> FSError {
    let error = fs.fs_mkdir(dir.toCString())
    return error
}

fn rmdir(dir: String) -> FSError {
    let error = fs.fs_rmdir(dir.toCString())
    return error
}


fn listDir(dir: String) -> String[] {
    let (files, error) = fs.fs_listdir(dir.toCString())
    if(error) {
        println("Error listing dir: " + dir)
        return []
    }

    println("Listing dir: " + dir + " found " + files.length + " files")

    let filesList: String[] = []
    filesList.extend(files.length)
    for let i: u64 = 0; i < files.length; i = i + 1 {
        let file = new String(files[i])
        filesList[i] = file
    }

    let (dir_, error_) = fs.fs_get_user_directory()
    println("Current dir: " + new String(dir_))

    return filesList
}

fn createTemp(name: String) -> String? {
    let (temp, error) = fs.fs_create_temp(name.toCString())
    
    if(error) {
        return null
    }

    return new String(temp)
}

fn getCurrentDirectory() -> String? {
    let (dir, error) = fs.fs_get_current_directory()
    
    if(error) {
        return null
    }

    return new String(dir)
}

fn getUserDirectory() -> String? {
    let (dir, error) = fs.fs_get_user_directory()
    
    if(error) {
        return null
    }

    return new String(dir)
}

fn getFileAttributes(filepath: String) -> FileAttributes? {
    let (
        gid,
        uid,
        mode,
        size,
        ctime,
        atime,
        mtime,
        blocks,
        blksize,
        rdev,
        nlink,
        ino,
        dev,
        error
    ) = fs.fs_get_file_attributes(filepath.toCString())

    if (error) {
        println("Error getting file attributes: " + error)
        return null
    }

    return {
        deviceId: dev,
        inodeNumber: ino,
        hardLinkCount: nlink,
        specialDeviceId: rdev,
        blockSize: blksize,
        blockCount: blocks,
        lastModifiedTime: mtime,
        lastAccessTime: atime,
        creationOrMetadataChangeTime: ctime,
        fileSize: size,
        fileMode: mode,
        ownerUserId: uid,
        ownerGroupId: gid
    }
}

fn chmod(filepath: String, mode: u8) -> FSError {
    let error = fs.fs_chmod(filepath.toCString(), mode)
    return error
}

fn exists(filepath: String) -> bool {
    let (exists, error) = fs.fs_exists(filepath.toCString())
    return exists != 0
}

fn copy(src: String, dest: String) -> FSError {
    let error = fs.fs_copy(src.toCString(), dest.toCString())
    return error
}

fn move(src: String, dest: String) -> FSError {
    let error = fs.fs_move(src.toCString(), dest.toCString())
    return error
}

fn symlink(src: String, dest: String) -> FSError {
    let error = fs.fs_symlink(src.toCString(), dest.toCString())
    return error
}

fn readlink(name: String) -> String? {
    let (link, error) = fs.fs_readlink(name.toCString())
    if (error) {
        return null
    }

    return new String(link)
}

fn realpath(name: String) -> String? {
    let (real, error) = fs.fs_realpath(name.toCString())
    if (error) {
        return null
    }

    return new String(real)
}

fn getenv(name: String) -> String? {
    let (value, error) = fs.fs_getenv(name.toCString())
    if (error) {
        return null
    }

    return new String(value)
}

fn setenv(name: String, value: String, overwrite: bool) -> FSError {
    let error = fs.fs_setenv(name.toCString(), value.toCString(), overwrite)
    return error
}

fn unsetenv(name: String) -> FSError {
    let error = fs.fs_unsetenv(name.toCString())
    return error
}

fn getSeparator() -> Char {
    let sep = fs.fs_get_separator()
    return new Char(sep)
}

fn joinPaths(parts: String[]) -> String {
    if(parts.length == 0) {
        return new String()
    }

    let base_path = new String(parts[0])

    for let i: u64 = 1; i < parts.length; i = i + 1 {
        base_path = base_path + getSeparator() + parts[i]
    }

    return base_path
}
