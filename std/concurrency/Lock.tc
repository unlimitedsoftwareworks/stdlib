type Lock<T> = interface {
    /**
     * Requests a lock, returns a promise since the lock may
     * not be immediately available.
     */
    fn lock() -> Promise<T>

    /**
     * Unlocks the lock. immediate.
     * Returns an error code to indicate if the task is successful
     */
    fn unlock() -> UnlockResponse

    /**
     * Executes a block of code with the lock acquired, 
     * unlocking it afterward. The function passed should 
     * return a Promise to allow asynchronous operations.
     */
    fn withLock(fn: (data: T) -> Promise<void>) -> Promise<void>
}