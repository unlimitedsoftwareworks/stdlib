/**
 * @file array.ts
 * @description Default array interface
 */

type AbstractIterable<T> = interface  {
    fn next | () () -> (u64, T)
    fn hasNext() -> bool
}

type AbstractArray<T> = interface {
    /** x[i] */
    fn [](i: u64) -> T
    /** x[i] = v */
    fn []=(v: T,i: u64) -> T

    fn [-] (i: u64) -> T
    fn [-]= (v: T, i: u64) -> T

    /**
     * @description Returns the length of the array
     */
    fn length() -> u64

    /**
     * @description Returns the element at the given index
     */
    fn push(v: T) -> void

    /**
     * @description Returns the element at the given index
     */
    fn pop() -> T
}

type ArrayIterator<T> = class AbstractIterable<T> {
    let const array: AbstractArray<T>
    let index: u64

    // Constructor to initialize with an array
    fn init(array: AbstractArray<T>) {
        this.array = array
        this.index = 0 // Start at the beginning
    }

    // Return the next element and its index
    fn next | () () -> (u64, T) {
        if this.index < this.array.length() {
            let const value = this.array[this.index]
            let currentIndex = this.index
            this.index = this.index + 1 // Move to the next element
            return (currentIndex, value)
        }
        // If out of bounds, indicate end with a null value
        unreachable
    }

    // Check if there are more elements
    fn hasNext() -> bool {
        return this.index < this.array.length()
    }
}


type Array<T> = class AbstractArray<T> {
    let data: T[]
    let len: u64
    let capacity: u64

    fn init(mut data: T[]) {
        this.data = data
        this.len = data.length
        this.capacity = this.len
    }

    fn length() -> u64 {
        return this.len
    }

    fn push(v: T) -> void {
        if this.len == this.capacity {
            this.capacity = this.capacity * 2 + 1
            this.data.extend(this.capacity)
        }
        this.data[this.len] = v
        this.len = this.len + 1
    }
 
    fn pop() -> T {
        if this.len == 0 {
            unreachable
        }
        
        this.len = this.len - 1
        return this.data[this.len]
    }

    fn [] (i: u64) -> T {
        return this.data[i]
    }

    fn []= (v: T, i: u64) -> T {
        this.data[i] = v
        return v
    }

    fn [-] (i: u64) -> T {
        return this.data[this.len - i]
    }

    fn [-]= (v: T, i: u64) -> T {
        this.data[this.len - i] = v
        return v
    }

    fn map<Z>(f: fn (x: T) -> Z) -> Array<Z> {
        let result1 = new Array<Z>([])
        for let i: u64 = 0; i < this.len; i = i + 1 {
            result1.push(f(this.data[i]))
        }

        return result1
    }

    fn filter(f: fn (x: T) -> bool) -> Array<T> {
        let result2 = new Array<T>([])
        
        for let i: u64 = 0; i < this.len; i = i + 1 {
            if f(this.data[i]) {
                result2.push(this.data[i])
            }
        }
        return result2
    }

    fn reduce(f: fn (x: T, y: T) -> T) -> T {
        let result3 = this.data[0]
        for let i: u64 = 1; i < this.len; i = i + 1 {
            result3 = f(result3, this.data[i])
        }
        return result3
    }

    fn forEach<U>(f: fn (i: u64, x: T) -> U) -> void {
        for let i: u64 = 0; i < this.len; i = i + 1 {
            f(i, this.data[i])
        }
    }

    fn toIterator() {
        let iterator = cfn() -> (T, bool) {
            let counter: u64 = 0
            
            for let i: u64 = 0; i < this.len-1; i = i + 1 {
                let value = this.data[i]
                yield (value, false)
            }

            let value = this.data[this.len-1]
            yield! (value, true)
        }

        return coroutine iterator
    }

    fn getIterable() = new ArrayIterator<T>(this)
}