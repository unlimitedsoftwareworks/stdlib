/**
 * @file array.ts
 * @brief Default array interface
 */

from std.collections.iterator import ArrayIterator
 
/**
 * @brief Abstract array interface
 * Any Custom array class should implement this interface
 * @template T
 */
type AbstractArray<T> = interface {
    fn [] (i: u64) -> T
    fn []= (i: u64, v: T) -> T
    fn [-] (i: u64) -> T
    fn [-]= (i: u64, v: T) -> T

    /**
     * @brief Returns the length of the array
     */
    fn length() -> u64

    /**
     * @brief Returns the element at the given index
     */
    fn push(v: T) -> void

    /**
     * @brief Returns the element at the given index
     */
    fn pop() -> T

    /**
     * @brief Returns an iterable instance to iterate over the array
     */
    fn getIterable() -> ArrayIterator<T>

    /**
     * @brief Clears the array removing all elements
     * Must not keep any reference to the elements, so they can be garbage collected
     */
    fn clear() 

    /**
     * @brief checks if the array is empty
     * return true if the array is empty, false otherwise
     */
    fn isEmpty() -> bool
}

type Array<T> = class AbstractArray<T> {
    let data: T[]
    let len: u64
    let capacity: u64

    fn init(mut data: T[]) {
        this.data = data
        this.len = data.length
        this.capacity = this.len
    }

    fn init() {
        this += {data: [], len: 0, capacity: 0}
    }

    fn length() -> u64 {
        return this.len
    }

    fn push(v: T) -> void {
        if this.len == this.capacity {
            this.capacity = this.capacity * 2 + 1
            this.data.extend(this.capacity)
        }
        this.data[this.len] = v
        this.len = this.len + 1
    }
 
    fn pop() -> T {
        if this.len == 0 {
            
        }
        this.len = this.len - 1
        return this.data[this.len]
    }

    fn [](i: u64) -> T {
        return this.data[i]
    }

    fn []= (i: u64, v: T) -> T {
        this.data[i] = v
        return v
    }

    fn [-] (i: u64) -> T {
        return this.data[-i]
    }

    fn [-]= (i: u64, v: T) -> T {
        this.data[-i] = v
        return v
    }

    fn map<Z>(f: fn (x: T) -> Z) -> Array<Z> {
        let result1 = new Array<Z>([])
        for let i: u64 = 0; i < this.len; i = i + 1 {
            result1.push(f(this.data[i]))
        }

        return result1
    }

    fn filter(f: fn (x: T) -> bool) -> Array<T> {
        let result2 = new Array<T>([])
        
        for let i: u64 = 0; i < this.len; i = i + 1 {
            if f(this.data[i]) {
                result2.push(this.data[i])
            }
        }
        return result2
    }

    fn reduce(f: fn (x: T, y: T) -> T) -> T {
        let result3 = this.data[0]
        for let i: u64 = 1; i < this.len; i = i + 1 {
            result3 = f(result3, this.data[i])
        }
        return result3
    }

    fn forEach<U>(f: fn (i: u64, x: T) -> U) -> void {
        for  let i: u64 = 0; i < this.len; i = i + 1 {
            f(i, this.data[i])
        }
    }

    fn getCoIterator() {
        let iterator = cfn() -> (T, bool) {
            let counter: u64 = 0
            
            for let i: u64 = 0; i < this.len-1; i = i + 1 {
                let value = this.data[i]
                yield (value, false)
            }

            let value = this.data[this.len-1]
            yield! (value, true)
        }

        return coroutine iterator
    }

    fn getIterable() = new ArrayIterator<T>(this)

    fn clear() {
        // reset array to dereference all elements
        this += {data: [], len: 0, capacity: 0}
    }

    fn isEmpty() -> bool {
        return this.len == 0
    }

    fn getCapacity() -> u64 {
        return this.capacity
    }
}