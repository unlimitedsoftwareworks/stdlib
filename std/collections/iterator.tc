from std.collections.array import AbstractArray

type AbstractIterable<T> = interface  {
    fn next | () () -> (u64, T)
    fn hasNext() -> bool
}

type ArrayIterator<T> = class AbstractIterable<T> {
    let const array: AbstractArray<T>
    let index: u64

    // Constructor to initialize with an array
    fn init(array: AbstractArray<T>) {
        this.array = array
        this.index = 0 // Start at the beginning
    }

    // Return the next element and its index
    fn next | () () -> (u64, T) {
        if this.index < this.array.length() {
            let const value = this.array[this.index]
            let currentIndex = this.index
            this.index = this.index + 1 // Move to the next element
            return (currentIndex, value)
        }
        // If out of bounds, indicate end with a null value
        unreachable
    }

    // Check if there are more elements
    fn hasNext() -> bool {
        return this.index < this.array.length()
    }
}