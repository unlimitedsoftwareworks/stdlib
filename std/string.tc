from std.vm_api.io import io
from std.vm_api.stdcore import CastAPI


type IndexResult = variant {
    Ok(pos: u32),
    NotFound()
}

type Serilizable<T> = interface {
    fn serialize() -> u8[]
}

/**
 * UTF8-Character
 */
type Char = class {
    let buffer: u8[]

    fn init(mut charData: u8[]) {
        this.buffer = charData
    }

    fn bytes() -> u8[] {
        return this.buffer
    }
}

/**
 * UTF8-String
 * TODO:
 * - add allocated length and actual length
 * - call new stringAppend ... for adding numbers
 */
type String = class {
    /**
     * UTF-8 encoded buffer
     * Raw array buffer
     */
    let buffer: u8[]

    /**
     * The raw Length of the string in terms of bytes
     * not to be confused with the array buffer length.
     */
    let rawLen: u64

    /**
     * Length of the string in terms of UTF-8 Characters
     */
    let utf8Length: u64

    /**
     * Capacity of the array buffer, should be equal to buffer.length
     */
    let rawCapacity: u64


    let charIndicies: u64[]
    let charLen: u64

    /**
     * Creates a UTF-8 String from an array buffer.
     * It is a good practice to not store references of arrays but rather
     * Make copy of them
     */
    fn init(){
        this.buffer = []
        this.charIndicies = []
        this.rawLen = 0
        this.utf8Length = 0
        this.rawCapacity = 0
        this.charLen = 0
    }
    
    fn init(mut copy: String) {
        this.buffer = copy.buffer
        this.charIndicies = copy.charIndicies
        this.rawLen = copy.rawLen
        this.utf8Length = copy.utf8Length
        this.rawCapacity = copy.rawCapacity
        this.charLen = copy.charLen
    }

    fn init(buffer: u8[]) {
        this.buffer = []
        this.buffer.extend(buffer.length)
        
        this.charIndicies = []
        this.charIndicies.extend(buffer.length)
        
        let i: u64 = 0
        let charCounter: u64 = 0

        while i < buffer.length {
            let const byte = buffer[i]

            this.charIndicies[charCounter] = i
            charCounter += 1

            // Determine the number of bytes in this UTF-8 character
            let numBytes: u8 = 0

            if (byte & 0x80) == 0 {        // 1-byte character
                numBytes = 1
                this.buffer[i] = buffer[i]
            } else if (byte & 0xE0) == 0xC0 { // 2-byte character
                numBytes = 2
                this.buffer[i] = buffer[i]
                this.buffer[i+1] = buffer[i+1]
            } else if (byte & 0xF0) == 0xE0 { // 3-byte character
                numBytes = 3
                this.buffer[i] = buffer[i]
                this.buffer[i+1] = buffer[i+1]
                this.buffer[i+2] = buffer[i+2]
            } else if (byte & 0xF8) == 0xF0 { // 4-byte character
                numBytes = 4
                this.buffer[i] = buffer[i]
                this.buffer[i+1] = buffer[i+1]
                this.buffer[i+2] = buffer[i+2]
                this.buffer[i+3] = buffer[i+3]
            } else {
                numBytes = 1
                this.buffer[i] = buffer[i]
            }

            i += numBytes
        }

        this.utf8Length = charCounter
        this.charLen = charCounter
        this.rawCapacity = buffer.length
        this.rawLen = buffer.length
    }

    fn toString() -> String {
        return this
    }

    static fn fromBytes(buffer: u8[]) -> String {
        let str = new String(buffer)
        return str
    }

    /**
     * Returns the length of the string
     */
    fn length() -> u64 {
        return this.utf8Length
    }

    /**
     * Returns the raw length of the string
     */
    fn rawLength() -> u64 {
        return this.rawLen
    }

    fn clone() -> String {
        let str = new String(this)
        return str
    }

    fn eq(other: String) -> bool {
        if this.length() != other.length() {
            return false
        }

        let otherBuffer = other.bytes()

        for let i: u64 = 0; i < this.length(); i += 1 {
            if this.buffer[i] != otherBuffer[i] {
                return false
            }
        }

        return true
    }

    /**
     * Returns the byte array representation of the string
     */
    fn bytes() -> u8[] {
        return this.buffer
    }

    /**
     * Returns the UTF-8 character at the given index
     */
    fn __index__(idx: u64) -> Char {
        return new Char([this.buffer[idx]])
    }

    /**
     * Concatenates this string with the given string, overriding this' strings buffer.
     * returns the same reference
     */

    fn __add__(other: u8[]) -> String {
        return this.cat(other)
    }

    fn __add__(other: u32) -> String {
        return this.cat(other)
    }

    fn __add__(other: i8) -> String {
        return this.cat(other)
    }

    fn __add__(other: f32) -> String {
        return this.cat(other)
    }

    fn __add__(other: f64) -> String {
        return this.cat(other)
    }

    fn __add__(other: bool) -> String {
        return this.cat(other)
    }

    fn __add__(other: u8) -> String {
        return this.cat(other)
    }

    fn __add__(other: u16) -> String {
        return this.cat(other)
    }

    fn __add__(other: u64) -> String {
        return this.cat(other)
    }

    fn __add__(other: i16) -> String {
        return this.cat(other)
    }

    fn __add__(other: i32) -> String {
        return this.cat(other)
    }

    fn __add__(other: i64) -> String {
        return this.cat(other)
    }

    fn __add__(other: String) -> String {
        return this.cat(other)
    }

    fn cat(buffer: String) -> String {
        return this.cat(buffer.bytes(), buffer.rawLength())
    }

    fn cat(buffer: u8[]) -> String {
        return this.cat(buffer, buffer.length)
    }

    fn cat(buffer: u8[], len: u64) -> String {
        this.buffer.extend(this.buffer.length + len)
        this.charIndicies.extend(this.charIndicies.length + len)

        let i: u64 = 0
        let charCounter: u64 = this.charLen
        let offset = this.rawLen

        while i < len {
            //io.print_u64(len)
            //io.print_u64(buffer.length)
            //io.print_u64(i)
            let const byte = buffer[i]

            this.charIndicies[charCounter] = i
            charCounter += 1

            // Determine the number of bytes in this UTF-8 character
            let numBytes: u8 = 0
            if (byte & 0x80) == 0 {        // 1-byte character
                numBytes = 1
                this.buffer[offset+i] = buffer[i]
            } else if (byte & 0xE0) == 0xC0 { // 2-byte character
                numBytes = 2
                this.buffer[offset+i] = buffer[i]
                this.buffer[offset+i+1] = buffer[i+1]
            } else if (byte & 0xF0) == 0xE0 { // 3-byte character
                numBytes = 3
                this.buffer[offset+i] = buffer[i]
                this.buffer[offset+i+1] = buffer[i+1]
                this.buffer[offset+i+2] = buffer[i+2]
            } else if (byte & 0xF8) == 0xF0 { // 4-byte character
                numBytes = 4
                this.buffer[offset+i] = buffer[i]
                this.buffer[offset+i+1] = buffer[i+1]
                this.buffer[offset+i+2] = buffer[i+2]
                this.buffer[offset+i+3] = buffer[i+3]
            } else {
                numBytes = 1
                this.buffer[offset+i] = buffer[i]
            }

            i += numBytes
        }

        this.utf8Length = charCounter
        this.charLen = charCounter
        this.rawCapacity += len
        this.rawLen += len

        return this
    }
    
    
    fn cat(number: u8) -> String{
        let c = CastAPI.stringAppend_u8(this.buffer, number, this.rawLen as u32)
        this.rawLen += c
        this.utf8Length += c

        return this
    }

    fn cat(number: u16) -> String{
        let c = CastAPI.stringAppend_u16(this.buffer, number, this.rawLen as u32)
        this.rawLen += c
        this.utf8Length += c
        this.rawCapacity = this.buffer.length

        return this
    }

    fn cat(number: u32) -> String{
        let c = CastAPI.stringAppend_u32(this.buffer, number, this.rawLen as u32)
        this.rawLen += c
        this.utf8Length += c
        this.rawCapacity = this.buffer.length

        return this
    }

    fn cat(number: u64) -> String{
        let c = CastAPI.stringAppend_u64(this.buffer, number, this.rawLen as u32)
        this.rawLen += c
        this.utf8Length += c
        this.rawCapacity = this.buffer.length

        return this
    }

    fn cat(number: i8) -> String{
        let c = CastAPI.stringAppend_i8(this.buffer, number, this.rawLen as u32)
        this.rawLen += c
        this.utf8Length += c
        this.rawCapacity = this.buffer.length
        
        return this
    }

    fn cat(number: i16) -> String{
        let c = CastAPI.stringAppend_i16(this.buffer, number, this.rawLen as u32)
        this.rawLen += c
        this.utf8Length += c
        this.rawCapacity = this.buffer.length

        return this
    }

    fn cat(number: i32) -> String{
        let c = CastAPI.stringAppend_i32(this.buffer, number, this.rawLen as u32)
        this.rawLen += c
        this.utf8Length += c
        this.rawCapacity = this.buffer.length

        return this
    }

    fn cat(number: i64) -> String{
        let c = CastAPI.stringAppend_i64(this.buffer, number, this.rawLen as u32)
        this.rawLen += c
        this.utf8Length += c
        this.rawCapacity = this.buffer.length

        return this
    }

    fn cat(number: f32) -> String{
        let c = CastAPI.stringAppend_f32(this.buffer, number, this.rawLen as u32)
        this.rawLen += c
        this.utf8Length += c
        this.rawCapacity = this.buffer.length

        return this
    }

    fn cat(number: f64) -> String{
        let c = CastAPI.stringAppend_f64(this.buffer, number, this.rawLen as u32)
        this.rawLen += c
        this.utf8Length += c
        this.rawCapacity = this.buffer.length

        return this
    }

    fn cat(number: bool) -> String{
        
        if(number){
            return this.cat(b"true")
        }
        return this.cat(b"false")
    }


    /*
     * Convertion APIs
     */
    fn toU8() -> u8 {
        return CastAPI.stringArray_toU8(this.buffer)
    }

    fn toU16() -> u16 {
        return CastAPI.stringArray_toU16(this.buffer)
    }

    fn toU32() -> u32 {
        return CastAPI.stringArray_toU32(this.buffer)
    }

    fn toU64() -> u64 {
        return CastAPI.stringArray_toU64(this.buffer)
    }

    fn toI8() -> i8 {
        return CastAPI.stringArray_toI8(this.buffer)
    }

    fn toI16() -> i16 {
        return CastAPI.stringArray_toI16(this.buffer)
    }

    fn toI32() -> i32 {
        return CastAPI.stringArray_toI32(this.buffer)
    }

    fn toI64() -> i64 {
        return CastAPI.stringArray_toI64(this.buffer)
    }

    fn toF32() -> f32 {
        return CastAPI.stringArray_toF32(this.buffer)
    }

    fn toF64() -> f64 {
        return CastAPI.stringArray_toF64(this.buffer)
    }
}
